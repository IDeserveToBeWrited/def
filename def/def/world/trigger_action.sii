SiiNunit
{
# For modders: Please do not modify this file if you want to add a new entry. Create in
# this directory a new file "<base_name>.<idofyourmod>.sii" where <base_name> is name of
# base file without the extension (e.g. "city" for "/def/city.sii") and <idofyourmod> is
# some string which is unlikely to conflict with other mod.
#
# Warning: Even if the units are specified in more than one source file, they share the
# same namespace so suffixes or prefixes should be used to avoid conflicts.


########## Customizable actions ('command' is equal to unit name suffix) ##########

# NOTE: 'str_params' for customizable actions are used only as tooltips in editor

trigger_action : trig_action.achievement
{
	name: "*Achievement"
	command: "achievement"

	str_params[]: "[param1] Achievement trigger group name (from /def/achievements.sii)"
}

trigger_action : trig_action.cutscene
{
	name: "*Cutscene control"
	command: "cutscene"

	str_params[]: "[param1] Action type: 'load' | 'play' | 'play_once' | 'stop' | 'unload'"
	str_params[]: "[param2] Cutscene data name (from /def/camera/cutscenes.sii) (Only for 'load' action)"
	str_params[]: "[target] Camera point item at which the cutscene is loaded/played."
}

trigger_action : trig_action.trigger
{
	name: "*Trigger control"
	command: "trigger"

	str_params[]: "[param1] Action type: 'activate' (auto-reset) | 'disable' | 'enable'"
	str_params[]: "[target] Trigger item to which the action is applied."
}

trigger_action : trig_action.mover {
	name: "*Mover control"
	command: "mover"

	str_params[]: "[param1] Action type (all auto-reset): 'move' | 'speed' | 'show' | 'hide' | 'transport' | 'animation'"
	str_params[]: "[param2 : 'move'] Target node index"
	str_params[]: "[param2 : 'speed'] Target speed"
	str_params[]: "[param3 : 'speed'] Node index at which the target speed should be reached (default 0)"
	str_params[]: "[target] Mover item to which the action is applied."
}

trigger_action : trig_action.hud_message {
	name: "*HUD message"
	command: "hud_message"

	str_params[]: "[param1] Text"
	str_params[]: "[param2] Warning [0/1] - if set to 1, the message is shown as warning (default: 0)"
	str_params[]: "[param3] Delay [s] - for how long the message is shown (default: 5 seconds)"
}

trigger_action : trig_action.offence {
	name: "*Report offence"
	command: "offence"

	str_params[]: "[param1] Offence index (see /def/police_data.sii for available values)"
}

# *** Supported check types ***
#
# Check succeeds if a just generated random number is smaller than given parameter.
# Example: 'random 0.5' - should pass with cca 50% probability
#
# Check succeeds if the number of attached game actor's trailers matches given parameter.
# If one number is provided, exact match is required. Two numbers are used as an interval.
# Example: 'trailer_count 1-3' - game actor must have 1-3 attached trailers for the check to pass.
#
# Check succeeds if the total length of attached game actor's trailer chain matches given parameter.
# If one number is provided, exact match is required. Two numbers are used as an interval.
# Example: 'trailer_length 0' - game actor must not have an attached trailer for the check to pass.
# Example: 'trailer_length 0 20' - game actor can have any number of trailers (including 'none') as long as their total length is less then 20 for the check to pass.
#
# Check succeeds if the value of given game cvar matches given parameter.
# Example: 'cvar_g_pounds kg lb' - string cvar with name 'g_pounds' must be set to 'kg' or 'lb' for the check to pass.
# Example: 'cvar_g_traffic 0' - numeric cvar with name 'g_traffic' must be set to '0' for the check to pass.
# Example: 'cvar_g_traffic 1 100' - numeric cvar with name 'g_traffic' must be set to some value in interval <1;100> for the check to pass.

trigger_action : trig_action.check_and {
	name: "*Check (all conditions)"
	command: "check_and"

	str_params[]: "[param1,2,...] Condition string in format: [check_type] [parameters]"
	str_params[]: "[param1,2,...] Check types: 'random' | 'trailer_count' | 'trailer_length' | 'cvar'"
	str_params[]: "[param1,2,...] Check types: 'height' | 'width' | 'speed' | 'weight' | 'state'"
	str_params[]: "[param1,2,...] For info about individual check types, see /def/world/trigger_action.sii"
}

trigger_action : trig_action.check_or {
	name: "*Check (any condition)"
	command: "check_or"

	str_params[]: "[param1,2,...] Condition string in format: [check_type] [parameters]"
	str_params[]: "[param1,2,...] Check types: 'random' | 'trailer_count' | 'trailer_length' | 'cvar'"
	str_params[]: "[param1,2,...] Check types: 'height' | 'width' | 'speed' | 'weight' | 'state'"
	str_params[]: "[param1,2,...] For info about individual check types, see /def/world/trigger_action.sii"
}

trigger_action : trig_action.state {
	name: "*State control"
	command: "state"

	str_params[]: "[param1] Action type: 'add' | 'remove'"
	str_params[]: "[param2,3...] User defined states to perform action for."
}

trigger_action : trig_action.gate
{
	name: "*Gate control"
	command: "gate"

	str_params[]: "[param1] Action type: 'disable' (auto-reset) | 'lock' (auto-reset)"
	str_params[]: "[note] Target gate(s) must be inside trigger area."
}

trigger_action : trig_action.play_anim
{
	name: "*Play animation"
	command: "play_anim"

	str_params[]: "[target] Mover item to play the animation."
}

trigger_action : trig_action.toll_start
{
	name: "*Tollgate start (override hookups)"
	command: "toll_start"

	str_params[]: "[param1] Toll amount paid immediately (EUR)"
}

trigger_action : trig_action.toll_onetime
{
	name: "*Tollgate one-time (override hookups)"
	command: "toll_onetime"

	str_params[]: "[param1] Toll amount paid immediately (EUR)"
}

trigger_action : trig_action.toll_end
{
	name: "*Tollgate end (override hookups)"
	command: "toll_end"

	str_params[]: "[param1] Toll amount per km of route from the corresponding start tollgate (EUR)"
}

########## Preset actions ##########

trigger_action : trig_action.hud_parking
{
	name: "Parking HUD activation (auto reset)"

	command: "hud_activate"
	num_params[]: 3
}

trigger_action : trig_action.toll_01
{
	name: "toll Norway big default"

	command: "_pay_toll"
	num_params[]: 19
}

trigger_action : trig_action.toll_02
{
	name: "toll Norway small v4_s2_b2_i2"

	command: "_pay_toll"
	num_params[]: 14.5
}

trigger_action : trig_action.toll_03
{
	name: "toll Norway big pay_01"

	command: "_pay_toll"
	num_params[]: 7
}

trigger_action : trig_action.toll_04
{
	name: "toll Norway small v1_s1_b1_i1"

	command: "_pay_toll"
	num_params[]: 10.5
}

trigger_action : trig_action.toll_05
{
	name: "toll Norway big pay_02"

	command: "_pay_toll"
	num_params[]: 7.5
}

trigger_action : trig_action.toll_06
{
	name: "toll Norway small v3_s1_b2_i2"

	command: "_pay_toll"
	num_params[]: 11.5
}

trigger_action : trig_action.toll_07
{
	name: "toll Norway small v2_s2_b1_i1"

	command: "_pay_toll"
	num_params[]: 93
}

trigger_action : trig_action.toll_08
{
	name: "toll Sweden Oresund"

	command: "_pay_toll"
	num_params[]: 172
}

trigger_action : trig_action.toll_09
{
	name: "toll Denmark Storebelt"

	command: "_pay_toll"
	num_params[]: 234
}

trigger_action : trig_action.toll_10
{
	name: "toll Sweden Svinesund"

	command: "_pay_toll"
	num_params[]: 12
}

trigger_action : trig_action.weigh {
	name: "Weight request (mandatory)"

	command: "weigh_req"

	num_params[]: 1.0
}

trigger_action : trig_action.weight_check {
	name: "Weigh check (default)"

	command: "weigh_check"
}


trigger_action : trig_action.no_trl_disc
{
	name: "Disable trailer disconnection"
	command: "trailer"

	str_params[]: "no_disconnect"
}

trigger_action : trig_action.slow_time
{
	name: "Slow time (auto reset)"
	command: "_slow_time"
}

}
